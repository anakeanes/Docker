FROM golang:1.20.4-alpine3.17

#define working directory
#the function still in green color at first instead of the purple that it has to be
#after install docker plugin, the colors changed properly
WORKDIR /app

# the fist . stands for current directory
# the second . stands for the destination path
COPY . .

RUN go build -o api

# define which port to run
EXPOSE 8080

# command of running
CMD ['./api'""]

#build docker via command: docker build -t demo-go-api .
#the docker plugin is not install yet, cannot pull from the first line: FROM golang:1.20.4-alpine3.17
#install the dicker plugin extension
#build docker success

#check if the docker is successfully built via the command: docker images

#Issue log
#docker: Error response from daemon: Ports are not available: exposing port TCP 0.0.0.0:8080 -> 0.0.0.0:0: listen tcp 0.0.0.0:8080: bind: address already in use. //Port 8080 is in used
#go to main terminal and press CTRL+C to stop using port 8080
#type in the following command again: docker run -d -p 8080:8080 demo-go-api
#check if it's running at the destination port by the command: docker ps
#docker ps didn't show the container: try to restart docker or show or list via: docker ps -a
#open safari and port 8080 is not showing
#restart via command: docker restart dockerImageID // same old result



#Now we can use the API via the docker container

#to remove docker, use the following command: docker rmi -f ImageID


#push to docker hub
#command: docker login
#command: docker tag imageName Repository(username/repository):latest
#command: docker push Repository(username/repository):tagname

#if we want to download / pull the docker from docker hub
#example: search for database (mysql) on docker hub/ it will show the prepared docker for mysql
#we can use the command: docker pull mysql / type in the terminal
