#yml file is a configuration file that store the keys value (if it's in json will be {})
#<key>: value

#define docker version
version: '3' 

#service will define which container (1 or more) that we want to run
  #name the container(like --name) (example command: docker run -d -p 8000:8000 --name my-container node-server)
  #to see the log of the docker, use command: docker log <docker name>
services:
  #service name
  node-server:
    container_name: node 
    #repositary of the docker file
    #. is a current repository
    build: '/Users/macbookpro/Documents/GitHub/Docker/Docker/test-docker'
    #define the port (map the external:internal port like -p in docker run)
    ports:
      - "8000:8000"

    # to run docker compose, use the command: docker-compose up -d --build (change from the image to the container)
    # we didn't define the yml path because the "up" commmand is a default path
    # incident log:services.node-server.build must be a string (move the comments up: pass)
    # tested by localhost:8000/hello-world

  #add database
  db:
    image: mysql:latest
    container_name: db
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: root #define user for root mysql
      MYSQL_DATABASE: tutorial #define inititate database for mysql
    ports:
      - "3306:3306"

    #add container-volume
    #<external path: internal path>
    #everytime we run and found that the external path has the data, it will replace the internal data in the container. Prevent to create duplicate container all the times
    volumes:
      - mysql_data_test:/var/lib/mysql

    #the data in myphp will still remain even we docker-compose down and docker-compose up again
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: phpmyadmin
    environment:
      PMA_HOST: db       #define host that will use phpmyadmin to manage
      PMA_PORT: 3306     #port of the database
      PMA_USER: root     #user of the database
      PMA_PASSWORD: root #password of the database
    ports:
      - "8080:80"
    depends_on:
      - db

volumes:
  #name of the docker volume path
  mysql_data_test: 
    driver: local
#then go change the name for container mysql to mysql_data_test

# root is just for the demonstration, do not use it on production site
# use the command: docker-compose down, to stop the running container and network
# then use the command: docker-compose up -d --build
# issue log: image: <name:lastest>, no spacing in between
# docker ps, and out put will be 
#CONTAINER ID   IMAGE                          COMMAND                  CREATED          STATUS          PORTS                               NAMES
#70ff0de23c43   phpmyadmin/phpmyadmin:latest   "/docker-entrypoint.…"   13 seconds ago   Up 10 seconds   0.0.0.0:8080->80/tcp                phpmyadmin
#24c3f18ddfa9   mysql:latest                   "docker-entrypoint.s…"   13 seconds ago   Up 11 seconds   0.0.0.0:3306->3306/tcp, 33060/tcp   db
#65dfad3bd1fc   test-docker-node-server        "docker-entrypoint.s…"   13 seconds ago   Up 11 seconds   0.0.0.0:8000->8000/tcp              node

# use the command: docker logs <container's name>
# the output will come out in form of "Server running at http://localhost:8000"
# try to go to http://localhost:8080, the correct path we should see phpmyadmin page

#everything that involve with data storage or database, need to define the docker volume
#command: docker volume ls, to see the list of system docker volume

#try docker-compose down
#and then docker volume rm <docker-volume-name>, to remove the docker volume

#explore inside of the container (it always a linux), use command: docker exec -it <container name> sh, example docker exec -it mysql sh, docker exec -it mysql bash
#it will show sh-4.4# then type command: mysql -u -root -p, it will request password
#mysql command: show tables;, show databases; > use tutorial;> show tables; > select * from users;